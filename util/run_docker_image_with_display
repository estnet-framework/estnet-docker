#!/bin/bash

if [ $(id -u) = 0 ]; then
    echo 'ERROR: Do not run as root. This script uses sudo to acquire privileges.'
    exit 1
fi

FLAG_HELP=false
FLAG_HEADLESS=false
FLAG_UBUNTU=false


for d in "$@"
do
    if [[ $d != '-'* ]]; then
        DOCKER_IMAGE=($d)
    fi
    if [ $d = '-h' -o $d = '--help' ]; then
        FLAG_HELP=true;
    fi
done

if $FLAG_HELP; then
    printf '
run_docker_image_with_display DOCKER_IMAGE ...
   Run docker container based on the given image.

  -h, --help        Display this message and exit.

The $DISPLAY variable in the container is set, and the calling user'\''s
~/.Xauthority is mounted to ~/.Xauthority in the container, so that it'\''s
possible to run X applications, e.g., the omnet++ IDE.


Original author: Timon Petermann <timonpetermann@aol.com>
'
    exit 0
fi


# test whether docker service is running
DOCKER_START='sudo systemctl start docker.service'
if ! sudo docker version &> /dev/null ; then
#    if ! sudo docker version 2>&1 | grep -q 'Cannot connect to the Docker daemon' ; then
    echo 'ERROR: Is the docker daemon running? If using systemd, you can problably start it using'
    echo '```'
    echo $DOCKER_START
    echo '```'
    echo -n 'Shall I do that for you? (y/n) ' ; read USERINPUT
    if echo $USERINPUT | grep -iq '^y' ; then
        echo -n 'starting docker ... '
        if $DOCKER_START ; then
            echo 'done.'
        else
            echo 'FAILED.'
            exit 1
        fi
    else
        exit 1
    fi
fi

echo -n "pulling docker image $DOCKER_IMAGE_REPOSITORY ; this may take a while ... "
if sudo docker pull -q $DOCKER_IMAGE_REPOSITORY 2>&1 | grep -q 'denied: access forbidden' ; then
    echo
    echo 'ERROR: docker says "denied: access forbidden"; maybe you forgot to "docker login"?'
    echo '==> sudo docker login -u <username> -p <your_gitlab_access_token>' $CI_REGISTRY
    echo "  to create an access token, go to https://$CI_SERVER_HOST/profile/personal_access_tokens"
    exit 2
fi
echo 'done.'

sudo docker pull $DOCKER_IMAGE
sudo docker run --rm -it --network host -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY $DOCKER_IMAGE